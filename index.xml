<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>静语忆昔</title>
        <link>https://www.alltoone.eu.org/</link>
        <description>Recent content on 静语忆昔</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Tue, 08 Nov 2022 23:00:00 +0800</lastBuildDate><atom:link href="https://www.alltoone.eu.org/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>NAS 外网访问</title>
        <link>https://www.alltoone.eu.org/p/nas-intranet-penetration/</link>
        <pubDate>Tue, 08 Nov 2022 23:00:00 +0800</pubDate>
        
        <guid>https://www.alltoone.eu.org/p/nas-intranet-penetration/</guid>
        <description>简介 DDNS 概念(有公网IP)： DDNS 将用户的动态 IP 地址映射到一个固定的域名解析服务上，用户每次连接网络的时候客户端程序就会通过信息传递把该主机的动态 IP 地址传送给位于服务商主机上的服务器程序，服务器程序负责提供 DNS 服务并实现动态域名解析。 内网穿透概念(无公网IP)： 通过在有公网 IP 的服务器上运行反向代理服务与局域网内某主机上运行的反向代理服务（Web 服务器）之间建立一个安全的通道。远程通过访问公有云主机反向代理服务，跳到局域网服务器，并可以通过它来间接访问局域网内其它主机。
两者对比 概括：优先选 DDNS
DDNS 优点：点对点，速度有保障，稳定、延迟低（上传速度决定最大速度），不需要单独服务器 缺点：需要公网 IP
内网穿透 优点：无需公网 IP，组网更灵活 缺点：服务器的线路决定了访问的速度，需要单独服务器
如何部署 DDNS 思路（DDNS） 因现在家用网络申请 ipv4 公网 IP 很难，现在国家在大力推进 ipv6 的建设，所以只要我们的路由器支持 ipv6，都能使用公网的 ipv6，在路由器上的 ipv6 的上网方式中选择 Native 模式，这样才能给每一个机器分配公网的 ipv6 的 IP （这里有个坑，有些路由器（如小米）默认开启 ipv6 外网访问的防火墙，导致外网无法访问，这里需要手动关掉） 把 ipv6 地址映射到提供 DDNS 服务的域名，远程通过此域名来访问目标局域网 NAS 部署 CloudFlare DDNS 因群晖（系统版本7.0）原生不支持 CloudFlare DDNS，所以需要手动添加 CloudFlare DDNS
方法一：把代码添加进原生 DDNS 服务中
方法二：使用 docker 部署）
准备材料 （CF） 群晖（系统版本7.</description>
        </item>
        <item>
        <title>使用 CloudFlare Pages 进行反代</title>
        <link>https://www.alltoone.eu.org/p/cloudflarepages-fandaili/</link>
        <pubDate>Mon, 10 Oct 2022 01:01:00 +0800</pubDate>
        
        <guid>https://www.alltoone.eu.org/p/cloudflarepages-fandaili/</guid>
        <description>简介 Cloudflare Pages 是Cloudflare推出的静态网站托管服务，功能和 Github Pages 相似，可以存放静态网页，还可以直接部署前端项目。如果你的网站只是静态博客或帮助文档的话，可以完全不需要购买服务器。直接部署到 Cloudflare Pages 服务上。
准备材料 Github/ GitLab账号 CloudFlare 账号
CloudFlare Pages 反代步骤 在 Github 上创建新项目并新建 &amp;ldquo;_worker.js&amp;rdquo; 名字的文件 把 CloudFlare Pages 反代代码写入文件中（代码类型在文章后面，自行选择），把文件中的 app.example.com 换成反代地址
在 CloudFlare 上找到 &amp;ldquo;Pages&amp;rdquo; 并创建项目 在 Github 账号上选择刚创建的项目 填入需要的名称，其他设置默认 显示成功即可 进行自定义域名，按 &amp;ldquo;继续处理项目&amp;rdquo; 点击 &amp;ldquo;自定义域&amp;rdquo; 填写自己的域名 如果你用的是 Cloudflare 的 DNS 的话，Cloudflare可以一键设置 CNAME。如果不是的话就需要手动设置 CNAME，登录你的域名的管理后台，添加一条 CNAME 指向默认的 pages.dev 域名。
CloudFlare Pages 反代代码参考 CloudFlare Pages 一网站反代代码 1 2 3 4 5 6 7 8 9 10 11 export default { async fetch(request, env) { let url = new URL(request.</description>
        </item>
        <item>
        <title>使用PS快速修改横幅上的文字</title>
        <link>https://www.alltoone.eu.org/p/ps-quickly-change-text/</link>
        <pubDate>Fri, 05 Aug 2022 00:20:00 +0800</pubDate>
        
        <guid>https://www.alltoone.eu.org/p/ps-quickly-change-text/</guid>
        <description>前言 因平时工作偶然会使用到PS修一下横幅的文字，每次我都会去搜索一下，感觉挺麻烦的，故想记录下来，方便查找自己使用过的方法。
使用技巧 如果想使用快捷键（Ctrl+S）存储图片为psd文件格式，只有一个图层时需要先解锁图层，才能使用快捷键，不然就在文件-&amp;gt;存储为中存储为psd文件格式。
方法一 使用修补工具（也可以使用内容识别填充），每个字选择后拖动，位置不够，拖动一点后再拖动一点 输入你需要的文字，修改字体，字的颜色，调整到合适的大小 加粗字体五种方式：
在字体的设置里，可以选择浑厚和平滑，这里都可以加粗文字，但效果不太明显 仿粗体，点击“切换字符和段落面板”，然后点击第一个T，就是仿粗体，字体就加粗了 复制图层的方法。就是复制文字图层，每复制一次，字体就会加粗一些，但是一定程度后就没效果了。这个方法的原理是这样的：每个字体的边缘都会有一些不清晰的像素。通过多图层的叠加。这些不清晰的像素的不透明度会越来越高，也就会越来越明显。但是这是有上限的，当所有不明显像素的不透明度都满了以后，再叠加也就没有用了 使用【图层样式】-【描边】来完成效果。双击文字图层，点击描边。大小自定义，可以加粗很多。内部外部也都可以，不过外部比内部粗一倍，可以根据效果来调整 使用滤镜来调整。这个方法首先要将文字图层栅格化，然后点击滤镜-其他-最小值，半径参数根据想要的文字粗细自定义 隐藏文字图层，然后另存为PSD格式文件格式 然后显示出文字图层，再找到滤镜-&amp;gt;扭曲-&amp;gt;置换，在弹框选择转换为智能对象，弹框中会出现水平比例、垂直比例等等，不需要修改，直接点击确定，接着选择刚刚保存的PSD文件,再点击打开，这是会发现文字会融入横幅的纹理中 打开滤镜-&amp;gt;杂色-&amp;gt;添加杂色，然后勾选单色和高斯分布，根据实际情况调整数量（斑点），接着确定（可后期修改） 找到滤镜-&amp;gt;模糊-&amp;gt;高斯模糊，数值调小一点（半径像素）（0.5左右） 打开混合选项，找到混合颜色带-&amp;gt;下一图层，把高光适当的还原一点（白色边），按住Alt键可以分离进行调整，调到适合的位置就完成了 可参考以下视频：
参考 PS如何加粗字体？
快速修改横幅上的文字，PS教程：实用且好玩的改字教程！</description>
        </item>
        <item>
        <title>使用 PAAS 搭建青龙面板</title>
        <link>https://www.alltoone.eu.org/p/qinglong-paas/</link>
        <pubDate>Fri, 29 Jul 2022 21:00:00 +0800</pubDate>
        
        <guid>https://www.alltoone.eu.org/p/qinglong-paas/</guid>
        <description>前言 因手上的服务器大多数都是短期测试的，并不适合长期运行青龙面板服务，故想到使用 PAAS 容器进行搭建，本文使用Divio、Railway、Fly.io进行搭建，并在搭建过程中遇到的问题作为记录。
简介 青龙面板：支持python3、javaScript、shell、typescript 的定时任务管理面板。
青龙面板有点类似油猴，它是一个脚本管理系统，本身不具有撸羊毛的功能。可以用来挂京东赚点京豆、金币，全当折腾玩吧。
注意 因不同的 PAAS 开放的端口不同（一般都会开放80与443），所以在某些容器中并不能使用傻妞等服务
使用 Railway 搭建 Tip 从2022年8月1日起，Railway 调整了定价计划，在入门计划中，Railway 将帐户限制为500小时的正常运行时间，使用信用卡验证后，升级为开发者计划，每月 5 美元的信用额度不再附带执行限制
注册Railway 点击以下按钮直接部署，然后在 Variables 添加关键字PORT，值为5700 使用 Fly.io 搭建 提示 Fly.io 免费版并不能完整部署，因为Fly.io免费版是全时运行 3 个具有 256MB RAM 的共享 cpu-1x VM，单独一个都低于青龙面板所需的内存，需要添加256MB RAM才能完整运行，而添加则需要加钱。我使用一个月后发现5美元以下是不收取费用的，所以可以添加 256MB RAM 来完整部署青龙面板
先到 Fly.io 注册账号，注意：注册时要记得绑定信用卡，银联的就行 创建 fly 应用程序（app）：flyctl launch，创建成功后，在 Fly.io 网页打开新建立的应用，点击左手边的 Scale，把 Memory 调为512M，然后点击 Scale Now 下载 qinglong-paas 代码 解压后，找到 fly.toml 文件，修改 app = &amp;quot;qinglong&amp;quot; 为自己创建应用程序的名字 在有 fly.toml 文件夹下，打开 cmd 命令界面，执行 flyctl deploy，这会应网络问题而失败，可能多推送几次才能成功。 使用 Divio 搭建 提醒 该容器的免费计划中，项目在不活动 30 分钟后会睡眠</description>
        </item>
        <item>
        <title>使用 Fly.io 搭建 ARPT-Bot</title>
        <link>https://www.alltoone.eu.org/p/arpt-bot-fly.io/</link>
        <pubDate>Fri, 29 Jul 2022 00:45:00 +0800</pubDate>
        
        <guid>https://www.alltoone.eu.org/p/arpt-bot-fly.io/</guid>
        <description>ARPT-Bot：一个基于Python3的Bot。目前支持以Docker的方式部署在vps上。支持Aria2、本子下载、网易云音乐下载、Pixiv榜单下载、Youtue-dl支持、搜图。
本文中提到的 Onedrive client id 和client_secret（密钥），文中并没有说明怎样创建，请参考 Aria2+Rclone+Onedrive实现全自动化下载 和 创建适用于Rclone的OneDrive Azure API
配置 Telegram_Bot 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 start - 查看Bot状态 help - 获取Bot的使用帮助 pixivauthor - 对pixiv画师作品操作 pixivtopall - 对pixiv排行榜进行操作 pixivtopillust - 对插画排行榜进行操作 pixivpid - 发送pixiv该id的图片 magfile - 推送种子文件至aria2下载后上传至网盘 mirror - 推送直链至aria2下载上传至网盘 mirrortg - 推送直链至aria2下载发送到TG magnet - 推送磁力链接至aria2下载后上传至网盘 downtgfile - 发送TG文件并上传至网盘 rclonecopy - 用rclone在网盘间传输 rclonelsd - 用rclone显示网盘文件夹 rclone - 用rclone显示文件夹内详细信息 rclonecopyurl - 用rclonecopyurl的方式直接上传直链文件 getfileid - 发送文件获取fileid getfile - 发送fileid来获取文件 video - 发送视频链接 neteaseid - 通过id获取歌曲信息 searchsong - 搜索网易云音乐歌曲 playlist - 获取歌单信息 odshare - 下载公开的od、sp分享链接文件并上传网盘 odprivate - 下载域内的od、sp分享链接上传到网盘 nhentai - 下载nhentai中对应id的本子 ehentai - 下载nhentai中对应id的本子 picacgsearch - 在哔咔中搜索本子，支持ZIP上传到网盘和发送到TG ehentaisearch - 在ehentai中搜索本子，支持ZIP上传到网盘和发送到TG、发送网页 nhentaisearch - 在nhentai中搜索本子，支持ZIP上传到网盘和发送到TG、发送网页 配置 fly.</description>
        </item>
        <item>
        <title>使用免费 PAAS 搭建 Alist</title>
        <link>https://www.alltoone.eu.org/p/alist.flyio.alwaysdata.render/</link>
        <pubDate>Wed, 20 Jul 2022 23:20:00 +0800</pubDate>
        
        <guid>https://www.alltoone.eu.org/p/alist.flyio.alwaysdata.render/</guid>
        <description>&lt;img src="https://www.alltoone.eu.org/p/alist.flyio.alwaysdata.render/alist_1.png" alt="Featured image of post 使用免费 PAAS 搭建 Alist" /&gt;简介 Alist：一款支持多种存储的目录文件列表程序，支持 web 浏览与 webdav，后端基于gin，前端使用react。演示地址：https://alist.nn.ci
使用 Fly.io 部署 使用 GitHub Actions 自动部署 先到 Fly.io 注册账号，注意：注册时要记得绑定信用卡，银联的就行 创建 fly 应用程序（app）：flyctl launch （选择 ams (Amsterdam,Netherlands)） 创建 fly 卷（volume）：flyctl volumes create data --region ams --size 1 Fork alist-fly.io 后，在 Settings -&amp;gt; Secrets -&amp;gt; Actions 中增加 FLY_API_TOKEN、APP_NAME 安全字段 FLY_API_TOKEN - Fly API 接口 Token 值，可访问 https://web.fly.io/user/personal_access_tokens 或在本地执行 flyctl auth token 查看 APP_NAME - 应用名称，注意此名称全局唯一 设置好后，代码自行触发部署，已设置每月十八号八点（UTC）自动部署，可在 .github/workflows/main.yml 中进行修改。
初始密码在 Fly.io 的监控日志中进行查看，Dashboard -&amp;gt; personal -&amp;gt; 应用程序的名字 -&amp;gt; Monitoring</description>
        </item>
        <item>
        <title>使用 VPS 搭建青龙面板</title>
        <link>https://www.alltoone.eu.org/p/qinglonginstallation/</link>
        <pubDate>Mon, 18 Jul 2022 15:20:00 +0800</pubDate>
        
        <guid>https://www.alltoone.eu.org/p/qinglonginstallation/</guid>
        <description>&lt;img src="https://www.alltoone.eu.org/p/qinglonginstallation/qinglong_logo.png" alt="Featured image of post 使用 VPS 搭建青龙面板" /&gt;简介 青龙面板：支持python3、javaScript、shell、typescript 的定时任务管理面板。
青龙面板有点类似油猴，它是一个脚本管理系统，本身不具有撸羊毛的功能。可以用来挂京东赚点京豆、金币，全当折腾玩吧。
Docker 使用 安装 Docker 国外机（推荐）
1 curl -sSL https://get.docker.com/ | sh 国内机（连接 Telegram 时，需要代理）
1 curl -sSL https://get.daocloud.io/docker | sh 启动 Docker 1 systemctl start docker 设置 Docker 开机自启动 1 systemctl enable docker 将普通用户添加到docker用户组 1 2 3 groupadd docker gpasswd -a ashin docker systemctl restart docker 青龙面板安装 1 2 3 4 5 6 7 docker run -dit \ -v $PWD/ql:/ql/data \ -p 5700:5700 \ --name qinglong \ --hostname qinglong \ --restart unless-stopped \ whyour/qinglong:latest 部署完后，直接访问ip:5700端口即可，如下图。（5700为映射端口）</description>
        </item>
        <item>
        <title>使用VPS搭建ARPT-Bot</title>
        <link>https://www.alltoone.eu.org/p/arpt-bot/</link>
        <pubDate>Mon, 18 Jul 2022 00:20:00 +0800</pubDate>
        
        <guid>https://www.alltoone.eu.org/p/arpt-bot/</guid>
        <description>&lt;img src="https://www.alltoone.eu.org/p/arpt-bot/arpt-bot.png" alt="Featured image of post 使用VPS搭建ARPT-Bot" /&gt;ARPT-Bot：一个基于Python3的Bot。目前支持以Docker的方式部署在vps上。支持Aria2、本子下载、网易云音乐下载、Pixiv榜单下载、Youtue-dl支持、搜图。
本文中提到的 Onedrive client id 和client_secret（密钥），文中并没有说明怎样创建，请参考 Aria2+Rclone+Onedrive实现全自动化下载 和 创建适用于Rclone的OneDrive Azure API
Docker 使用 安装 Docker 国外机（推荐）
1 curl -sSL https://get.docker.com/ | sh 国内机（连接 Telegram 时，需要代理）
1 curl -sSL https://get.daocloud.io/docker | sh 启动 Docker 1 systemctl start docker 设置 Docker 开机自启动 1 systemctl enable docker 将普通用户添加到docker用户组 1 2 3 groupadd docker gpasswd -a ashin docker systemctl restart docker 配置 Telegram_Bot 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 start - 查看Bot状态 help - 获取Bot的使用帮助 pixivauthor - 对pixiv画师作品操作 pixivtopall - 对pixiv排行榜进行操作 pixivtopillust - 对插画排行榜进行操作 pixivpid - 发送pixiv该id的图片 magfile - 推送种子文件至aria2下载后上传至网盘 mirror - 推送直链至aria2下载上传至网盘 mirrortg - 推送直链至aria2下载发送到TG magnet - 推送磁力链接至aria2下载后上传至网盘 downtgfile - 发送TG文件并上传至网盘 rclonecopy - 用rclone在网盘间传输 rclonelsd - 用rclone显示网盘文件夹 rclone - 用rclone显示文件夹内详细信息 rclonecopyurl - 用rclonecopyurl的方式直接上传直链文件 getfileid - 发送文件获取fileid getfile - 发送fileid来获取文件 video - 发送视频链接 neteaseid - 通过id获取歌曲信息 searchsong - 搜索网易云音乐歌曲 playlist - 获取歌单信息 odshare - 下载公开的od、sp分享链接文件并上传网盘 odprivate - 下载域内的od、sp分享链接上传到网盘 nhentai - 下载nhentai中对应id的本子 ehentai - 下载nhentai中对应id的本子 picacgsearch - 在哔咔中搜索本子，支持ZIP上传到网盘和发送到TG ehentaisearch - 在ehentai中搜索本子，支持ZIP上传到网盘和发送到TG、发送网页 nhentaisearch - 在nhentai中搜索本子，支持ZIP上传到网盘和发送到TG、发送网页 安装 ARPT-Bot Docker 部署命令：</description>
        </item>
        <item>
        <title>网站底部运行时间统计</title>
        <link>https://www.alltoone.eu.org/p/add-running-time/</link>
        <pubDate>Sun, 17 Jul 2022 20:00:00 +0800</pubDate>
        
        <guid>https://www.alltoone.eu.org/p/add-running-time/</guid>
        <description>&lt;img src="https://www.alltoone.eu.org/p/add-running-time/add-running-time.png" alt="Featured image of post 网站底部运行时间统计" /&gt;以本博客主题（hugo-theme-stack）为例子进行添加时间动态显示
复制.\themes\hugo-theme-stack\layouts\partials\footer\footer.html到.\layouts\partials\footer同名文件夹下，此目的是为了在后续的主题升级中保留自定义设置，可以在.\themes\hugo-theme-stack\layouts\partials\footer\footer.html中直接修改。
在文件中添加
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 &amp;lt;!</description>
        </item>
        <item>
        <title>聊聊我为什么写博客</title>
        <link>https://www.alltoone.eu.org/p/life-write/</link>
        <pubDate>Mon, 11 Jul 2022 00:00:00 +0000</pubDate>
        
        <guid>https://www.alltoone.eu.org/p/life-write/</guid>
        <description>&lt;img src="https://www.alltoone.eu.org/p/life-write/life-title.jpg" alt="Featured image of post 聊聊我为什么写博客" /&gt;前言 很早之前，我就已经了解过博客了，一直想搭建个，但当时心里这是想搭着玩，并没有想到搭好后的事情，还觉得浪费时间，所以就不了了之了。去年下半年使用服务器搭了WorldPress，使用了一下，虽然主题丰富插件多，但是运行起来需要的服务器资源多，我当时的也是测试机，之后又是不想理的状态，今年年初，偶尔看到使用Vercel部署Hexo的教程，当时的我并不知道WorldPress与Hexo的区别，在我搭建完后，试写时发现和WorldPress写作方式不一样，需要学会.md文件的编写，然后我又停滞了。一直到了6月底，写博客的心越来越强烈，从而不断地参考资料，经过层层筛选，最后使用Hugo+GithubPages方案搭建了这个博客。
写博客带来的价值 保持整理资料的习惯 在不断学习的过程中，我收藏的文件资料也越来越多，因为自己是个懒惰的人，虽然一直想着改变，所以在日积月累的情况下，我收藏的资料杂乱无章，如一些教程，明明已经学习过，但是当我看到时还是会继续去收藏，写博客的话就可以作为自己资料进行修改整理，极大减少了重复的事情，也推动着自己保持良好的习惯。
加强文字表达能力 不要怕自己写的东西没有价值，不值得被传播，要相信每个人都有自己独特的视角。“独特的视角”跟职能、资历、经验都无关，只需要一双能够发现自己独特视角的眼睛。不管你是刚步入职场还是已经工作了20年，不管你是一个实习生还是一个管理者，不管你是哪个部门/岗位，都有自己独特的视角。前提是，要有独立思考的能力和习惯，并且能够把自己的思考用文字表达出来。很多人有一个误区，就是写作的前提是要有极好的文笔/华丽的辞藻/丰厚的语文功底。写作的门槛不在于文字功底，而在于思考深度。看过许多博客的自述，他们一开始文字表达并不是很好的，随着发布的文章越来越多，文字表达能力也随之提升。
个人思考与成长 经过了学业与工作的各个时期，我发现自己在不同阶段与角色可能会有着截然不同的思考与成长，有时回顾起来也会很有感触。相信几个月甚至几年后的自己也能从这点点滴滴的记录中找到自己当时的心境。当自己逐渐培养起记录生活的习惯，也会让自己能关注与感受到生活的美好，也能更积极地面对来自未来的挑战。个人博客就像自己的一个树洞，在记录与表达自己情绪的同时，也许也会收获一些来自陌生人的温暖。
个人博客 随着互联网的迅速发展，我们有了更多的表达渠道，却又似乎丧失了表达的欲望。朋友圈、微博等似乎是适合情绪表达的第一阵地，但字数限制与太多的社交关联又让我们望而却步；而知乎、简书这样的平台又似乎太过“专业”，并不适合所有内容，也容易被网络舆论所左右。
个人博客则是一个更完美的选择。我们可以随心所欲地按自己的喜好定制博客的各个模块，而折腾与优化的过程就像装修自己的一个小屋一样，很有成就感。配合个性域名也能打造自己的个人品牌，不管是在个人社交平台还是求职简历上放上自己的个人网站链接都是一个不错的加分项。
也许我现在所写的并不好，我只是用自己的方式记录我自己所想，使用引用来表达自己想表达的。我曾经的一位朋友对我说过，我只需要我觉得，不需要你觉得。但我还是会听取好的意见，不断地完善自己。</description>
        </item>
        <item>
        <title>Chinese Test</title>
        <link>https://www.alltoone.eu.org/p/test-chinese/</link>
        <pubDate>Wed, 09 Sep 2020 23:51:36 +0800</pubDate>
        
        <guid>https://www.alltoone.eu.org/p/test-chinese/</guid>
        <description>&lt;img src="https://www.alltoone.eu.org/p/test-chinese/helena-hertz-wWZzXlDpMog-unsplash.jpg" alt="Featured image of post Chinese Test" /&gt;正文测试 而这些并不是完全重要，更加重要的问题是， 带着这些问题，我们来审视一下学生会退会。 既然如何， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 我们不得不面对一个非常尴尬的事实，那就是， 可是，即使是这样，学生会退会的出现仍然代表了一定的意义。 学生会退会，发生了会如何，不发生又会如何。 经过上述讨论， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 学生会退会，到底应该如何实现。 这样看来， 在这种困难的抉择下，本人思来想去，寝食难安。 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 就我个人来说，学生会退会对我的意义，不能不说非常重大。 莎士比亚曾经提到过，人的一生是短的，但如果卑劣地过这一生，就太长了。这似乎解答了我的疑惑。 莫扎特说过一句富有哲理的话，谁和我一样用功，谁就会和我一样成功。这启发了我， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 学生会退会，到底应该如何实现。 一般来说， 从这个角度来看， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 在这种困难的抉择下，本人思来想去，寝食难安。 了解清楚学生会退会到底是一种怎么样的存在，是解决一切问题的关键。 一般来说， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 问题的关键究竟为何？ 而这些并不是完全重要，更加重要的问题是。
奥斯特洛夫斯基曾经说过，共同的事业，共同的斗争，可以使人们产生忍受一切的力量。　带着这句话，我们还要更加慎重的审视这个问题： 一般来讲，我们都必须务必慎重的考虑考虑。 既然如此， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 带着这些问题，我们来审视一下学生会退会。 我认为， 我认为， 在这种困难的抉择下，本人思来想去，寝食难安。 问题的关键究竟为何？ 每个人都不得不面对这些问题。 在面对这种问题时， 要想清楚，学生会退会，到底是一种怎么样的存在。 我认为， 既然如此， 每个人都不得不面对这些问题。 在面对这种问题时， 那么， 我认为， 学生会退会因何而发生。
引用 思念是最暖的忧伤像一双翅膀
让我停不了飞不远在过往游荡
不告而别的你 就算为了我着想
这么沉痛的呵护 我怎么能翱翔
最暖的憂傷 - 田馥甄
图片 1 2 3 ![Photo by Florian Klauer on Unsplash](florian-klauer-nptLmg6jqDo-unsplash.jpg) ![Photo by Luca Bravo on Unsplash](luca-bravo-alS7ewQ41M8-unsplash.</description>
        </item>
        <item>
        <title>归档</title>
        <link>https://www.alltoone.eu.org/archives/</link>
        <pubDate>Tue, 28 May 2019 00:00:00 +0000</pubDate>
        
        <guid>https://www.alltoone.eu.org/archives/</guid>
        <description></description>
        </item>
        <item>
        <title>Markdown Syntax Guide</title>
        <link>https://www.alltoone.eu.org/p/markdown-syntax-guide/</link>
        <pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate>
        
        <guid>https://www.alltoone.eu.org/p/markdown-syntax-guide/</guid>
        <description>&lt;img src="https://www.alltoone.eu.org/p/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash.jpg" alt="Featured image of post Markdown Syntax Guide" /&gt;&lt;p&gt;This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.&lt;/p&gt;</description>
        </item>
        <item>
        <title>Placeholder Text</title>
        <link>https://www.alltoone.eu.org/p/placeholder-text/</link>
        <pubDate>Sat, 09 Mar 2019 00:00:00 +0000</pubDate>
        
        <guid>https://www.alltoone.eu.org/p/placeholder-text/</guid>
        <description>&lt;img src="https://www.alltoone.eu.org/p/placeholder-text/matt-le-SJSpo9hQf7s-unsplash.jpg" alt="Featured image of post Placeholder Text" /&gt;&lt;p&gt;Lorem est tota propiore conpellat pectoribus de pectora summo.&lt;/p&gt;</description>
        </item>
        <item>
        <title>Math Typesetting</title>
        <link>https://www.alltoone.eu.org/p/math-typesetting/</link>
        <pubDate>Fri, 08 Mar 2019 00:00:00 +0000</pubDate>
        
        <guid>https://www.alltoone.eu.org/p/math-typesetting/</guid>
        <description>&lt;p&gt;Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.&lt;/p&gt;</description>
        </item>
        <item>
        <title>Emoji Support</title>
        <link>https://www.alltoone.eu.org/p/emoji-support/</link>
        <pubDate>Tue, 05 Mar 2019 00:00:00 +0000</pubDate>
        
        <guid>https://www.alltoone.eu.org/p/emoji-support/</guid>
        <description>&lt;img src="https://www.alltoone.eu.org/p/emoji-support/the-creative-exchange-d2zvqp3fpro-unsplash.jpg" alt="Featured image of post Emoji Support" /&gt;&lt;p&gt;Emoji can be enabled in a Hugo project in a number of ways.&lt;/p&gt;</description>
        </item>
        <item>
        <title>关于</title>
        <link>https://www.alltoone.eu.org/%E5%85%B3%E4%BA%8E/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://www.alltoone.eu.org/%E5%85%B3%E4%BA%8E/</guid>
        <description>This is a test page for i18n support.</description>
        </item>
        <item>
        <title>搜索</title>
        <link>https://www.alltoone.eu.org/search/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://www.alltoone.eu.org/search/</guid>
        <description></description>
        </item>
        <item>
        <title>友链</title>
        <link>https://www.alltoone.eu.org/%E5%8F%8B%E9%93%BE/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://www.alltoone.eu.org/%E5%8F%8B%E9%93%BE/</guid>
        <description>To use this feature, add links section to frontmatter.
This page&amp;rsquo;s frontmatter:
1 2 3 4 5 6 7 8 9 links: - title: GitHub description: GitHub is the world&amp;#39;s largest software development platform. website: https://github.com image: https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png - title: TypeScript description: TypeScript is a typed superset of JavaScript that compiles to plain JavaScript. website: https://www.typescriptlang.org image: ts-logo-128.jpg image field accepts both local and external images.</description>
        </item>
        
    </channel>
</rss>
