[{"content":"简介 Cloudflare Pages 是Cloudflare推出的静态网站托管服务，功能和 Github Pages 相似，可以存放静态网页，还可以直接部署前端项目。如果你的网站只是静态博客或帮助文档的话，可以完全不需要购买服务器。直接部署到 Cloudflare Pages 服务上。\n准备材料 Github/ GitLab账号 CloudFlare 账号\nCloudFlare Pages 反代步骤 在 Github 上创建新项目并新建 \u0026ldquo;_worker.js\u0026rdquo; 名字的文件 把 CloudFlare Pages 反代代码写入文件中（代码类型在文章后面，自行选择），把文件中的 app.example.com 换成反代地址\n在 CloudFlare 上找到 \u0026ldquo;Pages\u0026rdquo; 并创建项目 在 Github 账号上选择刚创建的项目 填入需要的名称，其他设置默认 显示成功即可 进行自定义域名，按 \u0026ldquo;继续处理项目\u0026rdquo; 点击 \u0026ldquo;自定义域\u0026rdquo; 填写自己的域名 如果你用的是 Cloudflare 的 DNS 的话，Cloudflare可以一键设置 CNAME。如果不是的话就需要手动设置 CNAME，登录你的域名的管理后台，添加一条 CNAME 指向默认的 pages.dev 域名。\nCloudFlare Pages 反代代码参考 CloudFlare Pages 一网站反代代码 1 2 3 4 5 6 7 8 9 10 11 export default { async fetch(request, env) { let url = new URL(request.url); if (url.pathname.startsWith(\u0026#39;/\u0026#39;)) { url.hostname = \u0026#39;反代地址\u0026#39; let new_request = new Request(url, request); return fetch(new_request); } return env.ASSETS.fetch(request); }, }; CloudFlare Pages 单双日轮换反代代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 export default { async fetch(request, env) { const SingleDay = \u0026#39;app0.example.com\u0026#39; const DoubleDay = \u0026#39;app1.example.com\u0026#39; let host = \u0026#39;\u0026#39; let nd = new Date(); if (nd.getDate()%2) { host = SingleDay } else { host = DoubleDay } let url = new URL(request.url); if (url.pathname.startsWith(\u0026#39;/\u0026#39;)) { url.hostname=host; let new_request=new Request(url,request); return fetch(new_request); } // Otherwise, serve the static assets. return env.ASSETS.fetch(request); } }; CloudFlare Pages 每五天轮换一遍式反代代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 export default { async fetch(request, env) { const Day0 = \u0026#39;app0.example.com\u0026#39; const Day1 = \u0026#39;app1.example.com\u0026#39; const Day2 = \u0026#39;app2.example.com\u0026#39; const Day3 = \u0026#39;app3.example.com\u0026#39; const Day4 = \u0026#39;app4.example.com\u0026#39; let host = \u0026#39;\u0026#39; let nd = new Date(); let day = nd.getDate() % 5; if (day === 0) { host = Day0 } else if (day === 1) { host = Day1 } else if (day === 2) { host = Day2 } else if (day === 3){ host = Day3 } else if (day === 4){ host = Day4 } else { host = Day1 } let url = new URL(request.url); if (url.pathname.startsWith(\u0026#39;/\u0026#39;)) { url.hostname = host; let new_request = new Request(url,request); return fetch(new_request); } // Otherwise, serve the static assets. return env.ASSETS.fetch(request); } }; CloudFlare Pages 一周轮换反代代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 export default { async fetch(request, env) { const Day0 = \u0026#39;app0.example.com\u0026#39; const Day1 = \u0026#39;app1.example.com\u0026#39; const Day2 = \u0026#39;app2.example.com\u0026#39; const Day3 = \u0026#39;app3.example.com\u0026#39; const Day4 = \u0026#39;app4.example.com\u0026#39; const Day5 = \u0026#39;app5.example.com\u0026#39; const Day6 = \u0026#39;app6.example.com\u0026#39; let host = \u0026#39;\u0026#39; let nd = new Date(); let day = nd.getDay(); if (day === 0) { host = Day0 } else if (day === 1) { host = Day1 } else if (day === 2) { host = Day2 } else if (day === 3){ host = Day3 } else if (day === 4) { host = Day4 } else if (day === 5) { host = Day5 } else if (day === 6) { host = Day6 } else { host = Day1 } let url = new URL(request.url); if (url.pathname.startsWith(\u0026#39;/\u0026#39;)) { url.hostname = host; let new_request = new Request(url,request); return fetch(new_request); } // Otherwise, serve the static assets. return env.ASSETS.fetch(request); } }; CloudFlare Pages 随机轮换反代代码/每天自动更换VPS 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 export default { async fetch(request, env) { const cars = [ \u0026#34;app1.example.com\u0026#34;, \u0026#34;app2.example.com\u0026#34;, \u0026#34;app3.example.com\u0026#34;, \u0026#34;app4.example.com\u0026#34;, \u0026#34;app5.example.com\u0026#34; ]; let host = cars[Math.floor(Math.random() * cars.length)]; //随机选择VPS //let host = cars[new Date().getDate() % cars.length]; //每天自动更换VPS let url = new URL(request.url); if (url.pathname.startsWith(\u0026#39;/\u0026#39;)) { url.hostname = host; let new_request = new Request(url,request); return fetch(new_request); } return env.ASSETS.fetch(request); } }; 参考 使用cloudflare pages进行反代 使用cloudflare worker反代网站 Cloudflare Pages多账户反代代码应用说明 如何使用 Cloudflare Pages 托管静态网站 ","date":"2022-10-10T01:01:00+08:00","permalink":"https://www.alltoone.eu.org/p/cloudflarepages-fandaili/","title":"使用 CloudFlare Pages 进行反代"},{"content":"前言 因平时工作偶然会使用到PS修一下横幅的文字，每次我都会去搜索一下，感觉挺麻烦的，故想记录下来，方便查找自己使用过的方法。\n使用技巧 如果想使用快捷键（Ctrl+S）存储图片为psd文件格式，只有一个图层时需要先解锁图层，才能使用快捷键，不然就在文件-\u0026gt;存储为中存储为psd文件格式。\n方法一 使用修补工具（也可以使用内容识别填充），每个字选择后拖动，位置不够，拖动一点后再拖动一点 输入你需要的文字，修改字体，字的颜色，调整到合适的大小 加粗字体五种方式：\n在字体的设置里，可以选择浑厚和平滑，这里都可以加粗文字，但效果不太明显 仿粗体，点击“切换字符和段落面板”，然后点击第一个T，就是仿粗体，字体就加粗了 复制图层的方法。就是复制文字图层，每复制一次，字体就会加粗一些，但是一定程度后就没效果了。这个方法的原理是这样的：每个字体的边缘都会有一些不清晰的像素。通过多图层的叠加。这些不清晰的像素的不透明度会越来越高，也就会越来越明显。但是这是有上限的，当所有不明显像素的不透明度都满了以后，再叠加也就没有用了 使用【图层样式】-【描边】来完成效果。双击文字图层，点击描边。大小自定义，可以加粗很多。内部外部也都可以，不过外部比内部粗一倍，可以根据效果来调整 使用滤镜来调整。这个方法首先要将文字图层栅格化，然后点击滤镜-其他-最小值，半径参数根据想要的文字粗细自定义 隐藏文字图层，然后另存为PSD格式文件格式 然后显示出文字图层，再找到滤镜-\u0026gt;扭曲-\u0026gt;置换，在弹框选择转换为智能对象，弹框中会出现水平比例、垂直比例等等，不需要修改，直接点击确定，接着选择刚刚保存的PSD文件,再点击打开，这是会发现文字会融入横幅的纹理中 打开滤镜-\u0026gt;杂色-\u0026gt;添加杂色，然后勾选单色和高斯分布，根据实际情况调整数量（斑点），接着确定（可后期修改） 找到滤镜-\u0026gt;模糊-\u0026gt;高斯模糊，数值调小一点（半径像素）（0.5左右） 打开混合选项，找到混合颜色带-\u0026gt;下一图层，把高光适当的还原一点（白色边），按住Alt键可以分离进行调整，调到适合的位置就完成了 可参考以下视频：\n参考 PS如何加粗字体？\n快速修改横幅上的文字，PS教程：实用且好玩的改字教程！\n","date":"2022-08-05T00:20:00+08:00","permalink":"https://www.alltoone.eu.org/p/ps-quickly-change-text/","title":"使用PS快速修改横幅上的文字"},{"content":" 前言 因手上的服务器大多数都是短期测试的，并不适合长期运行青龙面板服务，故想到使用 PAAS 容器进行搭建，本文使用Divio、Railway、Fly.io进行搭建，并在搭建过程中遇到的问题作为记录。\n简介 青龙面板：支持python3、javaScript、shell、typescript 的定时任务管理面板。\n青龙面板有点类似油猴，它是一个脚本管理系统，本身不具有撸羊毛的功能。可以用来挂京东赚点京豆、金币，全当折腾玩吧。\n注意 因不同的 PAAS 开放的端口不同（一般都会开放80与443），所以在某些容器中并不能使用傻妞等服务\n使用 Railway 搭建 Tip 从2022年8月1日起，Railway 调整了定价计划，在入门计划中，Railway 将帐户限制为500小时的正常运行时间，使用信用卡验证后，升级为开发者计划，每月 5 美元的信用额度不再附带执行限制\n注册Railway 点击以下按钮直接部署，然后在 Variables 添加关键字PORT，值为5700 使用 Fly.io 搭建 提示 Fly.io 免费版并不能完整部署，因为Fly.io免费版是全时运行 3 个具有 256MB RAM 的共享 cpu-1x VM，单独一个都低于青龙面板所需的内存，需要添加256MB RAM才能完整运行，而添加则需要加钱。我使用一个月后发现5美元以下是不收取费用的，所以可以添加 256MB RAM 来完整部署青龙面板\n先到 Fly.io 注册账号，注意：注册时要记得绑定信用卡，银联的就行 创建 fly 应用程序（app）：flyctl launch，创建成功后，在 Fly.io 网页打开新建立的应用，点击左手边的 Scale，把 Memory 调为512M，然后点击 Scale Now 下载 qinglong-paas 代码 解压后，找到 fly.toml 文件，修改 app = \u0026quot;qinglong\u0026quot; 为自己创建应用程序的名字 在有 fly.toml 文件夹下，打开 cmd 命令界面，执行 flyctl deploy，这会应网络问题而失败，可能多推送几次才能成功。 使用 Divio 搭建 提醒 该容器的免费计划中，项目在不活动 30 分钟后会睡眠\n该容器分为 TEST 和 LIVE 两部分，我们直接部署在 LIVE 中\nFork qinglong-paas 项目 注册Divio 创建新的应用，在 NAME 中填写应用名字，在后面会检测应用名字的重复性 选择仓库时，选 CUSTOM 在自己的Fork项目的下复制 SSH 链接 在第4步中选 CUSTOM 后的弹框中，把复制的 SSH 链接粘贴到 REPOSITORY URL 中,然后复制密钥 把复制的密钥粘贴到Fork项目中，Settings -\u0026gt; Deploy keys -\u0026gt; Add deploy key ，名字随意 回到Divio中，点击CONTINUE 进入新建的Divio项目中，在 LIVE 中的 Env Variables 添加关键字PORT，值为5700 在应用中回到Environments，在 LIVE 中点击 DEPLOY，出现 succeeded后，表示部署完成，点击 ENV URL 就可以打开网站了 如果想添加订阅功能可转到 使用 VPS 搭建青龙面板 查看\n参考 whyour/qinglong York618/qinglong-railway ","date":"2022-07-29T21:00:00+08:00","permalink":"https://www.alltoone.eu.org/p/qinglong-paas/","title":"使用 PAAS 搭建青龙面板"},{"content":" ARPT-Bot：一个基于Python3的Bot。目前支持以Docker的方式部署在vps上。支持Aria2、本子下载、网易云音乐下载、Pixiv榜单下载、Youtue-dl支持、搜图。\n本文中提到的 Onedrive client id 和client_secret（密钥），文中并没有说明怎样创建，请参考 Aria2+Rclone+Onedrive实现全自动化下载 和 创建适用于Rclone的OneDrive Azure API\n配置 Telegram_Bot 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 start - 查看Bot状态 help - 获取Bot的使用帮助 pixivauthor - 对pixiv画师作品操作 pixivtopall - 对pixiv排行榜进行操作 pixivtopillust - 对插画排行榜进行操作 pixivpid - 发送pixiv该id的图片 magfile - 推送种子文件至aria2下载后上传至网盘 mirror - 推送直链至aria2下载上传至网盘 mirrortg - 推送直链至aria2下载发送到TG magnet - 推送磁力链接至aria2下载后上传至网盘 downtgfile - 发送TG文件并上传至网盘 rclonecopy - 用rclone在网盘间传输 rclonelsd - 用rclone显示网盘文件夹 rclone - 用rclone显示文件夹内详细信息 rclonecopyurl - 用rclonecopyurl的方式直接上传直链文件 getfileid - 发送文件获取fileid getfile - 发送fileid来获取文件 video - 发送视频链接 neteaseid - 通过id获取歌曲信息 searchsong - 搜索网易云音乐歌曲 playlist - 获取歌单信息 odshare - 下载公开的od、sp分享链接文件并上传网盘 odprivate - 下载域内的od、sp分享链接上传到网盘 nhentai - 下载nhentai中对应id的本子 ehentai - 下载nhentai中对应id的本子 picacgsearch - 在哔咔中搜索本子，支持ZIP上传到网盘和发送到TG ehentaisearch - 在ehentai中搜索本子，支持ZIP上传到网盘和发送到TG、发送网页 nhentaisearch - 在nhentai中搜索本子，支持ZIP上传到网盘和发送到TG、发送网页 配置 fly.toml 文件 下载 ARPT-Bot-fly.io 解压后，找到 fly.toml 文件，修改 fly.toml 文件 在有 fly.toml 文件夹下，打开 cmd 命令界面，执行 flyctl deploy，这会应网络问题而失败，需多推送几次才能成功。 修改 fly.toml 文件，如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 app = \u0026#34;xxx\u0026#34; # 修改为自己创建应用程序的名字 kill_signal = \u0026#34;SIGINT\u0026#34; kill_timeout = 5 processes = [] [env] Api_hash = \u0026#34;xxx\u0026#34; # 在https://my.telegram.org中注册应用后得到 Api_id = \u0026#34;xxx\u0026#34; # 在https://my.telegram.org中注册应用后得到 Aria2_secret = \u0026#34;xxx\u0026#34; # Aria2的密匙 （最好设置为字母大小写和数字组合） Remote = \u0026#34;xxx\u0026#34; # 上传目的地的rclone盘符 Telegram_bot_api = \u0026#34;xxx\u0026#34; # Bot的API，在@BotFather申请获得 Telegram_user_id = \u0026#34;xxx\u0026#34; # 使用者的TG id，可在@userinfobot处获得 Upload = \u0026#34;xxx\u0026#34; # 上传文件夹名称，后面不需要加/ Rclone_share = \u0026#34;False\u0026#34; Error_user_info = \u0026#34;你没有使用权限\u0026#34; 配置解释：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 Api_hash、Api_id 这两项在https://my.telegram.org中注册应用后得到 Aria2_secret Aria2的密匙 （最好设置为字母大小写和数字组合） Telegram_bot_api Bot的API，在@BotFather申请获得 Telegram_user_id 使用者的TG id（个人使用），可在@userinfobot处获得，设置为群组ID则该群组所有人员可用（多人使用），需要设置Bot的群组权限 Remote 上传目的地的rclone盘符 （安装rclone后，在手动运行 rclone config 时起的名字时需一致） Upload 上传文件夹名称，后面不需要加/ (需要上传到网盘的文件夹名称) Rclone_share 可不填，True 为上传网盘后返回分享链接(onedrive)，False 为关闭该功能，不设置该变量则默认关闭 Error_user_info 可不填，可设置非允许使用者发送消息时的提示，不设置该变量则使用默认语句 然后去tg试试你的机器人能不能说话，再继续。\n配置 rclone 全新安装 我们先在windows上配置一下\n下载Windows对应位数的压缩包，网址：https://rclone.org/downloads/\n先解压到D:\\rclone (临时使用)\n管理员命令提示符（Cmd/PowerShell）输入下面的命令，回车\n1 2 cd D:\\rclone .\\rclone authorize \u0026#34;onedrive\u0026#34; Window10 需要在命令前，加.\\，Window7 则不需要。\n这时会自动打开浏览器让你登录你的Onedrive账户\n点击授权后，浏览器提醒你返回，回到cmd中，发现多了一大串字符。复制花括号里的所有字符(如图)，新建一个文档保存，一会要用。\n进入 Fly.io Docker 使用 flyctl ssh console 连接到正在运行的应用程序实例。\n在有 fly.toml 的文件夹运行 flyctl ssh console，可以SSH连接该fly.toml文件中的应用程序。使用cmd打开，可能会出现乱码，使用VSCode等编辑器打开。\n1 flyctl ssh console 在 Docker 中输入 rclone config 输入n创建新配置，配置名称随意，【如：yun（-e Remote=yun \\ 中的需一致）】建议从简，否则后边输命令的时候你会后悔~ 输入27，即【Microsoft OneDrive】 输入client id 和密钥，然后会问你【是否编辑高级设置】、【是否使用自动设置】，全部选n即可 最后会给出一条命令，需要在你自己的电脑cmd中，执行此命令，然后把结果粘贴过来 参考图示如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 输入 rclone config 输入 n 输入 yun （-e Remote=yun \\ 中的需一致） 找到 OneDrive （一般是 27 / Microsoft OneDrive\\ \u0026#34;onedrive\u0026#34;) Storage\u0026gt; 27 Option client_id. OAuth Client Id. Leave blank normally. Enter a string value. Press Enter for the default (\u0026#34;\u0026#34;). client_id\u0026gt;回车 (输入client_id) Option client_secret. OAuth Client Secret. Leave blank normally. Enter a string value. Press Enter for the default (\u0026#34;\u0026#34;). client_secret\u0026gt;回车 (输入client_secret) Option region. Choose national cloud region for OneDrive. Enter a string value. Press Enter for the default (\u0026#34;global\u0026#34;). Choose a number from below, or type in your own value. 1 / Microsoft Cloud Global \\ \u0026#34;global\u0026#34; 2 / Microsoft Cloud for US ** \\ \u0026#34;us\u0026#34; 3 / Microsoft Cloud Germany \\ \u0026#34;de\u0026#34; 4 / Azure and Office 365 operated by 21Vianet in China \\ \u0026#34;cn\u0026#34; region\u0026gt;1 把之前复制花括号里的所有字符粘贴到这里\n退出 Docker 1 Ctrl + D 数据迁移安装 在旧搭建的 ARPT-Bot 中登录 File Browser (http://ip:port)，找到 /root/.config/rclone/rclone.conf 文件（这是已经配置好的网盘文件），全部复制后，粘贴到新安装的 ARPT-Bot 中的 /root/.config/rclone/rclone.conf ，这样可以直接时使用了。\n接着就可以去tg上面玩机器人了\n测试下载文件 Ubuntu 20.04.4 Desktop (64-bit)\n参考 Aria2+Rclone+Onedrive实现全自动化下载\n创建适用于Rclone的OneDrive Azure API\nARPT-Bot 搭建 支持各种资源下载 上传到各种网盘 OneDrive\nRclone 使用教程 - 挂载 OneDrive、Google Drive 等网盘(Linux)\n","date":"2022-07-29T00:45:00+08:00","permalink":"https://www.alltoone.eu.org/p/arpt-bot-fly.io/","title":"使用 Fly.io 搭建 ARPT-Bot"},{"content":"简介 Alist：一款支持多种存储的目录文件列表程序，支持 web 浏览与 webdav，后端基于gin，前端使用react。演示地址：https://alist.nn.ci\n使用 Fly.io 部署 使用 GitHub Actions 自动部署 先到 Fly.io 注册账号，注意：注册时要记得绑定信用卡，银联的就行 创建 fly 应用程序（app）：flyctl launch （选择 ams (Amsterdam,Netherlands)） 创建 fly 卷（volume）：flyctl volumes create data --region ams --size 1 Fork alist-fly.io 后，在 Settings -\u0026gt; Secrets -\u0026gt; Actions 中增加 FLY_API_TOKEN、APP_NAME 安全字段 FLY_API_TOKEN - Fly API 接口 Token 值，可访问 https://web.fly.io/user/personal_access_tokens 或在本地执行 flyctl auth token 查看 APP_NAME - 应用名称，注意此名称全局唯一 设置好后，代码自行触发部署，已设置每月十八号八点（UTC）自动部署，可在 .github/workflows/main.yml 中进行修改。\n初始密码在 Fly.io 的监控日志中进行查看，Dashboard -\u0026gt; personal -\u0026gt; 应用程序的名字 -\u0026gt; Monitoring\n手动推送部署 先到 Fly.io 注册账号，注意：注册时要记得绑定信用卡，银联的就行 在电脑 cmd 中安装 Fly.io，Windows电脑安装脚本： iwr https://fly.io/install.ps1 -useb | iex ，安装后运行flyctl auth login,在跳出的浏览器中进行登录授权，然后运行 flyctl launch 来创建、配置和部署新应用程序,记住创建应用程序的名字 下载 alist-fly.io 解压后，找到 fly.toml 文件，修改 app = \u0026quot;alist\u0026quot; 为自己创建应用程序的名字 在有 fly.toml 文件夹下，打开 cmd 命令界面，执行 fly deploy，这会应网络问题而失败，需多推送几次才能成功。 初始密码在 Fly.io 的监控日志中进行查看，Dashboard -\u0026gt; personal -\u0026gt; 应用程序的名字 -\u0026gt; Monitoring 使用 alwaysdata 部署 注意，这家有随意删号倾向，或者说管理特别严格，很容易被警告或者删号。感觉就是看心情……请停止使用。\n注册地址：https://www.alwaysdata.com/\nTip: 中国IP已拒绝注册，挂代理注册要选择干净的IP，否则注册页面要求验证信用卡。\n登录后台后，可修改为中文界面\n创建程序 注册成功以后，在跳转的页面弹窗中按要求填写应用名称，密码（以后管理所用的通用密码）。只能选100Mb的，其他收费。\n更改程序类型 Web —\u0026gt; Sites —\u0026gt; 编辑 —\u0026gt; Configuration，type 改成 user program\n把 Command 改为 ./alist\n设置 SSH 点击如图设置按钮\n勾选允许密码登录SSH，这个密码是刚才设置的 通用密码 ：\n连接 SSH 连接SSH，可以网页连接，也可以SSH客户端连接。账号是你前面设置的应用名称，密码是你刚才设置的 通用密码 ，端口是默认端口 ( 22 ) 。地址就在那个SSH管理界面上端，网页连接可以直接点击那个 WEB ：\n安装alist 连接上 ssh 以后，按照正常方法安装就行了。不过，alwaydata只开放了一个端口：8100 ，对外的 80 端口只展示内网的 8100 端口 ( 这意味着只能使用 sqlite3 的数据库 ) 。所以，需要改一下alist的配置文件。\n输入安装命令\n#下载 Alist\nwget https://github.com/Xhofe/alist/releases/download/v2.6.1/alist-linux-amd64.tar.gz\n#解压\ntar -zxvf alist-linux-amd64.tar.gz\n#重命名（和在site填写的./alist是一致的）\nmv alist-linux-amd64 alist\n修改配置文件\n#第一次在终端里运行（和在site填写的./alist是一致的）\n./alist\n#会自动生成配置文件夹data，还有记住自动生成的密码\n#修改配置文件\nvim data/config.json\n#默认端口是5244，需要修改成8100\nTip:\n简单说一下怎么用 vim，直接输入最后的 vim 命令后，输入 i 进入编辑模式，这时候才可以改文件内容。按 esc 退出编辑模式，退出以后，输入 :wq 进行保存并强制退出。\n然后重新启动网页即可\n配置 SSL 打开网页，参照 Alist Doc 文档进行添加网盘\n使用 Render 部署 注意：使用 Render 搭建的 Alist 无法使用 webdav 协议\n参考 Alist Doc York618/alist-flyio Originat/alist-fly.io Misakaou/alist-fly.io 利用永久免费的alwaydata搭建alist网盘列表 使用Render上部署Alist ","date":"2022-07-20T23:20:00+08:00","image":"https://www.alltoone.eu.org/p/alist.flyio.alwaysdata.render/alist_1_hue451d6ba0d494bc0fc4bf142b88156b3_1811362_120x120_fill_box_smart1_3.png","permalink":"https://www.alltoone.eu.org/p/alist.flyio.alwaysdata.render/","title":"使用免费 PAAS 搭建 Alist"},{"content":" 简介 青龙面板：支持python3、javaScript、shell、typescript 的定时任务管理面板。\n青龙面板有点类似油猴，它是一个脚本管理系统，本身不具有撸羊毛的功能。可以用来挂京东赚点京豆、金币，全当折腾玩吧。\nDocker 使用 安装 Docker 国外机（推荐）\n1 curl -sSL https://get.docker.com/ | sh 国内机（连接 Telegram 时，需要代理）\n1 curl -sSL https://get.daocloud.io/docker | sh 启动 Docker 1 systemctl start docker 设置 Docker 开机自启动 1 systemctl enable docker 将普通用户添加到docker用户组 1 2 3 groupadd docker gpasswd -a ashin docker systemctl restart docker 青龙面板安装 1 2 3 4 5 6 7 docker run -dit \\ -v $PWD/ql:/ql/data \\ -p 5700:5700 \\ --name qinglong \\ --hostname qinglong \\ --restart unless-stopped \\ whyour/qinglong:latest 部署完后，直接访问ip:5700端口即可，如下图。（5700为映射端口）\n配置 Telegram_Bot 到 BotFather 中申请Bot后，获取 token\n到 GetIDs Bot 中获取 user_id\n在通知设置选“Telegram机器人”，然后填写 token 、user_id\n添加定时任务 以京东脚本为例子\n网上有许多大佬维护的脚本，这里提供两个订阅：\nhttps://github.com/curtinlv/JD-Script.git\nhttps://github.com/drizzle888/faker2.git\n我们新建一个订阅管理来拉取以及定时更新脚本：\n点击新建任订阅 名字随意填 类型：公开仓库 链接填写：https://github.com/curtinlv/JD-Script.git 注意，此链接与所选用的脚本仓库有关 定时类型：crontab 定时规则：0 0 1 * * * 意思为每天凌晨一点执行 点击确定 点击运行 回到定时任务后，可以看到许多定时任务都已经添加到任务列表\n设置账号信息 一切就绪后，接下来就是最重要的环节：配置我们的京东账号信息\nCOOKIE可用于识别京东账户，证明「你是你」\n通过 Chrome 浏览器可以提取这个东西\n1、打开 Chrome 开发者工具，通常是F12. 切换到手机视图后访问：https://wqs.jd.com/\n2、登录京东账号成功后，先清除一下记录：\n3、然后再访问：https://home.m.jd.com/。记录列表的第一个应该是home.m.jd.com，点开它，右侧可以看到COOKIE，非常多。\n4、我们只需要两条：pt_key与pt_pin，一般在中间字段，把它们复制出来，结尾分号不要漏掉。最后应该类似：pt_key=AFEHYTWpCDD4slF11wQeWjW22zJqWYMw7lIU-CDqJHCykFdIZfNS_rGRbAsj-VfLdk9iL6RjB74; pt_pin=54456641-7;\n5、回到青龙面板，点击 环境变量 - 新建环境变量\n名称：JD_COOKIE 自动拆分：否 值：上面复制的 确定保存 如需添加多个账户，另外新建变量后将账户信息填入即可。自动检测。\n提醒：并不是所有的定时任务都可用，不可用时，请在网上寻找大佬们的新脚本使用。\n参考 青龙面板撸羊毛\n青龙面板：挂机京东领取京豆和金币\n","date":"2022-07-18T15:20:00+08:00","image":"https://www.alltoone.eu.org/p/qinglonginstallation/qinglong_logo_hue200e384111fae663ead57375b8267e6_34385_120x120_fill_box_smart1_3.png","permalink":"https://www.alltoone.eu.org/p/qinglonginstallation/","title":"使用 VPS 搭建青龙面板"},{"content":" ARPT-Bot：一个基于Python3的Bot。目前支持以Docker的方式部署在vps上。支持Aria2、本子下载、网易云音乐下载、Pixiv榜单下载、Youtue-dl支持、搜图。\n本文中提到的 Onedrive client id 和client_secret（密钥），文中并没有说明怎样创建，请参考 Aria2+Rclone+Onedrive实现全自动化下载 和 创建适用于Rclone的OneDrive Azure API\nDocker 使用 安装 Docker 国外机（推荐）\n1 curl -sSL https://get.docker.com/ | sh 国内机（连接 Telegram 时，需要代理）\n1 curl -sSL https://get.daocloud.io/docker | sh 启动 Docker 1 systemctl start docker 设置 Docker 开机自启动 1 systemctl enable docker 将普通用户添加到docker用户组 1 2 3 groupadd docker gpasswd -a ashin docker systemctl restart docker 配置 Telegram_Bot 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 start - 查看Bot状态 help - 获取Bot的使用帮助 pixivauthor - 对pixiv画师作品操作 pixivtopall - 对pixiv排行榜进行操作 pixivtopillust - 对插画排行榜进行操作 pixivpid - 发送pixiv该id的图片 magfile - 推送种子文件至aria2下载后上传至网盘 mirror - 推送直链至aria2下载上传至网盘 mirrortg - 推送直链至aria2下载发送到TG magnet - 推送磁力链接至aria2下载后上传至网盘 downtgfile - 发送TG文件并上传至网盘 rclonecopy - 用rclone在网盘间传输 rclonelsd - 用rclone显示网盘文件夹 rclone - 用rclone显示文件夹内详细信息 rclonecopyurl - 用rclonecopyurl的方式直接上传直链文件 getfileid - 发送文件获取fileid getfile - 发送fileid来获取文件 video - 发送视频链接 neteaseid - 通过id获取歌曲信息 searchsong - 搜索网易云音乐歌曲 playlist - 获取歌单信息 odshare - 下载公开的od、sp分享链接文件并上传网盘 odprivate - 下载域内的od、sp分享链接上传到网盘 nhentai - 下载nhentai中对应id的本子 ehentai - 下载nhentai中对应id的本子 picacgsearch - 在哔咔中搜索本子，支持ZIP上传到网盘和发送到TG ehentaisearch - 在ehentai中搜索本子，支持ZIP上传到网盘和发送到TG、发送网页 nhentaisearch - 在nhentai中搜索本子，支持ZIP上传到网盘和发送到TG、发送网页 安装 ARPT-Bot Docker 部署命令：\n1 2 3 4 5 6 7 8 9 10 11 12 13 docker run -d \\ --name arpt \\ -e Api_hash=xxx \\ -e Api_id=xxx \\ -e Aria2_secret=xxx \\ -e Remote=yun \\ -e Telegram_bot_api=xxx \\ -e Telegram_user_id=xxx \\ -e Upload=xxx \\ -e Rclone_share=False \\ -e Error_user_info=\u0026#34;你没有使用权限\u0026#34; \\ -p 8868:8868 \\ benchao/arpt:v2.1.0 配置解释：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 Api_hash、Api_id 这两项在https://my.telegram.org中注册应用后得到 Aria2_secret Aria2的密匙 （最好设置为字母大小写和数字组合） Telegram_bot_api Bot的API，在@BotFather申请获得 Telegram_user_id 使用者的TG id（个人使用），可在@userinfobot处获得，设置为群组ID则该群组所有人员可用（多人使用），需要设置Bot的群组权限 Remote 上传目的地的rclone盘符 （安装rclone后，在手动运行 rclone config 时起的名字时需一致） Upload 上传文件夹名称，后面不需要加/ (需要上传到网盘的文件夹名称) Rclone_share 可不填，True 为上传网盘后返回分享链接(onedrive)，False 为关闭该功能，不设置该变量则默认关闭 Error_user_info 可不填，可设置非允许使用者发送消息时的提示，不设置该变量则使用默认语句 然后去tg试试你的机器人能不能说话，再继续。\n配置 rclone 我们先在windows上配置一下\n下载Windows对应位数的压缩包，网址：https://rclone.org/downloads/\n先解压到D:\\rclone (临时使用)\n管理员命令提示符（Cmd/PowerShell）输入下面的命令，回车\n1 2 cd D:\\rclone .\\rclone authorize \u0026#34;onedrive\u0026#34; Window10 需要在命令前，加.\\，Window7 则不需要。\n这时会自动打开浏览器让你登录你的Onedrive账户\n点击授权后，浏览器提醒你返回，回到cmd中，发现多了一大串字符。复制花括号里的所有字符(如图)，新建一个文档保存，一会要用。\n进入 Docker 1 2 docker ps docker exec -it 775c7c9ee1e1 /bin/bash #把 775c7c9ee1e1 改成你的id，在vps上执行 docker ps 查看 在 Docker 中输入 rclone config 输入n创建新配置，配置名称随意，【如：yun（-e Remote=yun \\ 中的需一致）】建议从简，否则后边输命令的时候你会后悔~ 输入27，即【Microsoft OneDrive】 输入client id 和密钥，然后会问你【是否编辑高级设置】、【是否使用自动设置】，全部选n即可 最后会给出一条命令，需要在你自己的电脑cmd中，执行此命令，然后把结果粘贴过来 参考图示如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 输入 rclone config 输入 n 输入 yun （-e Remote=yun \\ 中的需一致） 找到 OneDrive （一般是 27 / Microsoft OneDrive\\ \u0026#34;onedrive\u0026#34;) Storage\u0026gt; 27 Option client_id. OAuth Client Id. Leave blank normally. Enter a string value. Press Enter for the default (\u0026#34;\u0026#34;). client_id\u0026gt;回车 (输入client_id) Option client_secret. OAuth Client Secret. Leave blank normally. Enter a string value. Press Enter for the default (\u0026#34;\u0026#34;). client_secret\u0026gt;回车 (输入client_secret) Option region. Choose national cloud region for OneDrive. Enter a string value. Press Enter for the default (\u0026#34;global\u0026#34;). Choose a number from below, or type in your own value. 1 / Microsoft Cloud Global \\ \u0026#34;global\u0026#34; 2 / Microsoft Cloud for US ** \\ \u0026#34;us\u0026#34; 3 / Microsoft Cloud Germany \\ \u0026#34;de\u0026#34; 4 / Azure and Office 365 operated by 21Vianet in China \\ \u0026#34;cn\u0026#34; region\u0026gt;1 把之前复制花括号里的所有字符粘贴到这里\n退出 Docker 1 Ctrl + D 接着就可以去tg上面玩机器人了\n测试下载文件 Ubuntu 20.04.4 Desktop (64-bit)\n参考 Aria2+Rclone+Onedrive实现全自动化下载\n创建适用于Rclone的OneDrive Azure API\nARPT-Bot 搭建 支持各种资源下载 上传到各种网盘 OneDrive\nRclone 使用教程 - 挂载 OneDrive、Google Drive 等网盘(Linux)\n","date":"2022-07-18T00:20:00+08:00","image":"https://www.alltoone.eu.org/p/arpt-bot/arpt-bot_hubf92167c8ef5014ddf3c863fd27ea34e_43585_120x120_fill_box_smart1_3.png","permalink":"https://www.alltoone.eu.org/p/arpt-bot/","title":"使用VPS搭建ARPT-Bot"},{"content":" 以本博客主题（hugo-theme-stack）为例子进行添加时间动态显示\n复制.\\themes\\hugo-theme-stack\\layouts\\partials\\footer\\footer.html到.\\layouts\\partials\\footer同名文件夹下，此目的是为了在后续的主题升级中保留自定义设置，可以在.\\themes\\hugo-theme-stack\\layouts\\partials\\footer\\footer.html中直接修改。\n在文件中添加\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 \u0026lt;!-- 新增如下，class=\u0026#34;powerby\u0026#34;为主题样式，可删除 --\u0026gt; \u0026lt;!-- \u0026lt;section class=\u0026#34;powerby\u0026#34;\u0026gt; --\u0026gt; \u0026lt;!-- 网站运行计时统计 start--\u0026gt; \u0026lt;!-- 删除以下注释，可强制居中：center --\u0026gt; \u0026lt;!-- \u0026lt;center\u0026gt; --\u0026gt; \u0026lt;!-- 本站已勉强运行： --\u0026gt; \u0026lt;span id=\u0026#34;sitetime\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;\u0026lt;span id=\u0026#34;sitetime\u0026#34; style=\u0026#34;color: #b89c72;\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;script language=javascript\u0026gt; function siteTime(){ window.setTimeout(\u0026#34;siteTime()\u0026#34;, 1000); var seconds = 1000; var minutes = seconds * 60; var hours = minutes * 60; var days = hours * 24; var years = days * 365; var today = new Date(); var todayYear = today.getFullYear(); var todayMonth = today.getMonth()+1; var todayDate = today.getDate(); var todayHour = today.getHours(); var todayMinute = today.getMinutes(); var todaySecond = today.getSeconds(); /* Date.UTC() -- 返回date对象距世界标准时间(UTC)1970年1月1日午夜之间的毫秒数(时间戳) year - 作为date对象的年份，为4位年份值 month - 0-11之间的整数，做为date对象的月份 day - 1-31之间的整数，做为date对象的天数 hours - 0(午夜24点)-23之间的整数，做为date对象的小时数 minutes - 0-59之间的整数，做为date对象的分钟数 seconds - 0-59之间的整数，做为date对象的秒数 microseconds - 0-999之间的整数，做为date对象的毫秒数 */ var t1 = Date.UTC(2022,7,11,02,30,0); //北京时间2016-12-1 00:00:00 var t2 = Date.UTC(todayYear,todayMonth,todayDate,todayHour,todayMinute,todaySecond); var diff = t2-t1; var diffYears = Math.floor(diff/years); var diffDays = Math.floor((diff/days)-diffYears*365); var diffHours = Math.floor((diff-(diffYears*365+diffDays)*days)/hours); var diffMinutes = Math.floor((diff-(diffYears*365+diffDays)*days-diffHours*hours)/minutes); var diffSeconds = Math.floor((diff-(diffYears*365+diffDays)*days-diffHours*hours-diffMinutes*minutes)/seconds); document.getElementById(\u0026#34;sitetime\u0026#34;).innerHTML=diffYears+\u0026#34; 年 \u0026#34;+diffDays+\u0026#34; 天 \u0026#34;+diffHours+\u0026#34; 时 \u0026#34;+diffMinutes+\u0026#34; 分 \u0026#34;+diffSeconds+\u0026#34; 秒\u0026#34;; } siteTime(); \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; #sitetime { animation: change 50s infinite; font-weight: 800; } @keyframes change { 0% { color: #85bfe5; } 25% { color: #a08c8c; } 50% { color: #746c50; } 75% { color: #ddc2ee; } 100% { color: #8c98a2; } } \u0026lt;/style\u0026gt; \u0026lt;!-- \u0026lt;/center\u0026gt; --\u0026gt; \u0026lt;!-- 网站运行计时统计 over--\u0026gt; \u0026lt;!-- \u0026lt;/section\u0026gt; --\u0026gt; 参考 网站底部运行时间统计：实现变色，时间为 ** 天 * 时 * 分 * 秒\n在网页的页尾添加网站运行时间！：时间为 ** 年 * 天 * 时 * 分 * 秒\n","date":"2022-07-17T20:00:00+08:00","image":"https://www.alltoone.eu.org/p/add-running-time/add-running-time_huda26ccf88421a2df6a82715f6e8b9d34_1021432_120x120_fill_box_smart1_3.png","permalink":"https://www.alltoone.eu.org/p/add-running-time/","title":"网站底部运行时间统计"},{"content":"前言 很早之前，我就已经了解过博客了，一直想搭建个，但当时心里这是想搭着玩，并没有想到搭好后的事情，还觉得浪费时间，所以就不了了之了。去年下半年使用服务器搭了WorldPress，使用了一下，虽然主题丰富插件多，但是运行起来需要的服务器资源多，我当时的也是测试机，之后又是不想理的状态，今年年初，偶尔看到使用Vercel部署Hexo的教程，当时的我并不知道WorldPress与Hexo的区别，在我搭建完后，试写时发现和WorldPress写作方式不一样，需要学会.md文件的编写，然后我又停滞了。一直到了6月底，写博客的心越来越强烈，从而不断地参考资料，经过层层筛选，最后使用Hugo+GithubPages方案搭建了这个博客。\n写博客带来的价值 保持整理资料的习惯 在不断学习的过程中，我收藏的文件资料也越来越多，因为自己是个懒惰的人，虽然一直想着改变，所以在日积月累的情况下，我收藏的资料杂乱无章，如一些教程，明明已经学习过，但是当我看到时还是会继续去收藏，写博客的话就可以作为自己资料进行修改整理，极大减少了重复的事情，也推动着自己保持良好的习惯。\n加强文字表达能力 不要怕自己写的东西没有价值，不值得被传播，要相信每个人都有自己独特的视角。“独特的视角”跟职能、资历、经验都无关，只需要一双能够发现自己独特视角的眼睛。不管你是刚步入职场还是已经工作了20年，不管你是一个实习生还是一个管理者，不管你是哪个部门/岗位，都有自己独特的视角。前提是，要有独立思考的能力和习惯，并且能够把自己的思考用文字表达出来。很多人有一个误区，就是写作的前提是要有极好的文笔/华丽的辞藻/丰厚的语文功底。写作的门槛不在于文字功底，而在于思考深度。看过许多博客的自述，他们一开始文字表达并不是很好的，随着发布的文章越来越多，文字表达能力也随之提升。\n个人思考与成长 经过了学业与工作的各个时期，我发现自己在不同阶段与角色可能会有着截然不同的思考与成长，有时回顾起来也会很有感触。相信几个月甚至几年后的自己也能从这点点滴滴的记录中找到自己当时的心境。当自己逐渐培养起记录生活的习惯，也会让自己能关注与感受到生活的美好，也能更积极地面对来自未来的挑战。个人博客就像自己的一个树洞，在记录与表达自己情绪的同时，也许也会收获一些来自陌生人的温暖。\n个人博客 随着互联网的迅速发展，我们有了更多的表达渠道，却又似乎丧失了表达的欲望。朋友圈、微博等似乎是适合情绪表达的第一阵地，但字数限制与太多的社交关联又让我们望而却步；而知乎、简书这样的平台又似乎太过“专业”，并不适合所有内容，也容易被网络舆论所左右。\n个人博客则是一个更完美的选择。我们可以随心所欲地按自己的喜好定制博客的各个模块，而折腾与优化的过程就像装修自己的一个小屋一样，很有成就感。配合个性域名也能打造自己的个人品牌，不管是在个人社交平台还是求职简历上放上自己的个人网站链接都是一个不错的加分项。\n也许我现在所写的并不好，我只是用自己的方式记录我自己所想，使用引用来表达自己想表达的。我曾经的一位朋友对我说过，我只需要我觉得，不需要你觉得。但我还是会听取好的意见，不断地完善自己。\n","date":"2022-07-11T00:00:00Z","image":"https://www.alltoone.eu.org/p/life-write/life-title_huebbfad1edfa8e198fe68a27ac6a615ca_934792_120x120_fill_q75_box_smart1.jpg","permalink":"https://www.alltoone.eu.org/p/life-write/","title":"聊聊我为什么写博客"},{"content":"正文测试 而这些并不是完全重要，更加重要的问题是， 带着这些问题，我们来审视一下学生会退会。 既然如何， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 我们不得不面对一个非常尴尬的事实，那就是， 可是，即使是这样，学生会退会的出现仍然代表了一定的意义。 学生会退会，发生了会如何，不发生又会如何。 经过上述讨论， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 学生会退会，到底应该如何实现。 这样看来， 在这种困难的抉择下，本人思来想去，寝食难安。 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 就我个人来说，学生会退会对我的意义，不能不说非常重大。 莎士比亚曾经提到过，人的一生是短的，但如果卑劣地过这一生，就太长了。这似乎解答了我的疑惑。 莫扎特说过一句富有哲理的话，谁和我一样用功，谁就会和我一样成功。这启发了我， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 学生会退会，到底应该如何实现。 一般来说， 从这个角度来看， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 在这种困难的抉择下，本人思来想去，寝食难安。 了解清楚学生会退会到底是一种怎么样的存在，是解决一切问题的关键。 一般来说， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 问题的关键究竟为何？ 而这些并不是完全重要，更加重要的问题是。\n奥斯特洛夫斯基曾经说过，共同的事业，共同的斗争，可以使人们产生忍受一切的力量。　带着这句话，我们还要更加慎重的审视这个问题： 一般来讲，我们都必须务必慎重的考虑考虑。 既然如此， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 带着这些问题，我们来审视一下学生会退会。 我认为， 我认为， 在这种困难的抉择下，本人思来想去，寝食难安。 问题的关键究竟为何？ 每个人都不得不面对这些问题。 在面对这种问题时， 要想清楚，学生会退会，到底是一种怎么样的存在。 我认为， 既然如此， 每个人都不得不面对这些问题。 在面对这种问题时， 那么， 我认为， 学生会退会因何而发生。\n引用 思念是最暖的忧伤像一双翅膀\n让我停不了飞不远在过往游荡\n不告而别的你 就算为了我着想\n这么沉痛的呵护 我怎么能翱翔\n最暖的憂傷 - 田馥甄\n图片 1 2 3 ![Photo by Florian Klauer on Unsplash](florian-klauer-nptLmg6jqDo-unsplash.jpg) ![Photo by Luca Bravo on Unsplash](luca-bravo-alS7ewQ41M8-unsplash.jpg) ![Photo by Helena Hertz on Unsplash](helena-hertz-wWZzXlDpMog-unsplash.jpg) ![Photo by Hudai Gayiran on Unsplash](hudai-gayiran-3Od_VKcDEAA-unsplash.jpg) 相册语法来自 Typlog\n","date":"2020-09-09T23:51:36+08:00","image":"https://www.alltoone.eu.org/p/test-chinese/helena-hertz-wWZzXlDpMog-unsplash_hu45a5e3ad5e058da6a00650ed8fd40bea_15530_120x120_fill_q75_box_smart1.jpg","permalink":"https://www.alltoone.eu.org/p/test-chinese/","title":"Chinese Test"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating. — Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob | 27 Alice | 23\nInline Markdown within tables Italics Bold Code italics bold code A B C D E F Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien Code Blocks Code block with backticks 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10 11 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Diff code block 1 2 3 4 5 [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;] List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nHyperlinked image The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2019-03-11T00:00:00Z","image":"https://www.alltoone.eu.org/p/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash_hud7e36f7e20e71be184458283bdae4646_55974_120x120_fill_q75_box_smart1.jpg","permalink":"https://www.alltoone.eu.org/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"},{"content":"Lorem est tota propiore conpellat pectoribus de pectora summo.\nRedit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\nExierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.\nComas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et Vagus elidunt The Van de Graaf Canon\nMane refeci capiebant unda mulcebat Victa caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides parte.\n","date":"2019-03-09T00:00:00Z","image":"https://www.alltoone.eu.org/p/placeholder-text/matt-le-SJSpo9hQf7s-unsplash_hu958d513eeefe5556a31d065479ecc5ac_14205_120x120_fill_q75_box_smart1.jpg","permalink":"https://www.alltoone.eu.org/p/placeholder-text/","title":"Placeholder Text"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\nCreate a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so: 1 2 3 {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }} To enable KaTex globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTex on a per page basis include the parameter math: true in content files Note: Use the online reference of Supported TeX Functions\nExamples Block math: $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\n","date":"2019-03-08T00:00:00Z","permalink":"https://www.alltoone.eu.org/p/math-typesetting/","title":"Math Typesetting"},{"content":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site\u0026rsquo;s configuration and then you can type emoji shorthand codes directly in content files; e.g.\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n1 2 3 .emoji { font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols; } ","date":"2019-03-05T00:00:00Z","image":"https://www.alltoone.eu.org/p/emoji-support/the-creative-exchange-d2zvqp3fpro-unsplash_huf941de4769045cdfa8c9ee7036519a2a_35369_120x120_fill_q75_box_smart1.jpg","permalink":"https://www.alltoone.eu.org/p/emoji-support/","title":"Emoji Support"}]